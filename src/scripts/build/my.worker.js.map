{
  "version": 3,
  "sources": ["../pub.worker.ts", "../process/my.worker.ts"],
  "sourcesContent": ["\r\ntype EventCallback = (cog: any) => void\r\n\r\nclass Tree {\r\n    tree = {}\r\n    proxy = {}\r\n    refs = {}\r\n    imports = {}\r\n    forms = {}\r\n    pure = {}\r\n    params = {}\r\n    constructor() { }\r\n}\r\n\r\nconst read_nest = (object: { [index: string]: any }, address: string | string[]) => {\r\n    if (typeof address == 'string')\r\n        address = address.split('.')\r\n\r\n    const address_step = address.shift()\r\n\r\n    if (address_step)\r\n        return read_nest(object[address_step], address)\r\n    else\r\n        return object\r\n}\r\nconst set_nest = (object: { [index: string]: any }, address: string | string[], value: any) => {\r\n    if (typeof address == 'string')\r\n        address = address.split('.')\r\n\r\n    const address_step = address.shift()\r\n    if (address_step)\r\n\r\n        if (address.length > 1)\r\n            read_nest(object[address_step], address)\r\n        else\r\n            object[address_step] = value\r\n}\r\n\r\n\r\nclass CoreWorker extends Tree {\r\n    constructor() {\r\n        super()\r\n    }\r\n    private set_imports() {\r\n        const items = document.querySelectorAll('script[ref_href_lib]')\r\n        items.forEach(item => {\r\n            this.imports[item.getAttribute('ref_href_lib') || ''] = window[item.getAttribute('name_href_lib') || '']\r\n        })\r\n    }\r\n    private deep_proxy(container, callback) {\r\n        const handler: ProxyHandler<Object> = {\r\n            get: (target, prop, receiver) => {\r\n                const value = Reflect.get(target, prop, receiver);\r\n                if (typeof value == 'object' && value !== null) {\r\n                    return this.deep_proxy(value, callback)\r\n                }\r\n                return value\r\n            },\r\n            set: (target, prop, receiver) => {\r\n                set_nest(target, prop as string, receiver)//target[prop] = receiver\r\n                console.log(target, prop, receiver)\r\n                callback(container, target, prop, receiver)\r\n                return true\r\n            }\r\n        }\r\n        return new Proxy(this.proxy, handler)\r\n    }\r\n    private proxy_callback = (container, target, prop, receiver) => {\r\n        const items = document.querySelectorAll(`[proxy_data=\"${prop}\"]`)\r\n        console.log(items, prop)\r\n        items.forEach(item => {// TODO create tree separated by dots\r\n            //this.proxy[item.getAttribute('proxy_data') || ''] = target\r\n            item.textContent = read_nest(this.proxy, item.getAttribute('proxy_data') || '')\r\n        })\r\n    }\r\n    private set_refs() {\r\n        const items = document.querySelectorAll('[ref]')\r\n        items.forEach(item => {\r\n            this.refs[item.getAttribute('ref') || ''] = item\r\n        })\r\n    }\r\n    private set_forms() {\r\n        const forms = document.querySelectorAll('div[form]')\r\n        forms.forEach(form => {\r\n            const form_name = form.getAttribute('form') || '_'\r\n            this.forms[form_name] = {}\r\n            const inputs = form.querySelectorAll('input[data-input]')\r\n            inputs.forEach(input => {\r\n                const name = input.getAttribute('name') || '_'\r\n                const proxy = input.getAttribute('input-proxy')\r\n                this.forms[form_name][name] = input\r\n                if (proxy){\r\n                    this.proxy[proxy] = input['value']\r\n                    input.addEventListener('input', () => {\r\n                        if(proxy) this.proxy[proxy] = input['value']\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n    set_params(){\r\n        const url_params = new URLSearchParams(window.location.search)\r\n        const it = url_params.entries()\r\n        for (let [key, value] of it){\r\n            this.params[key.toString()] = value.toString()\r\n        }\r\n    }\r\n    init(): CoreWorker {\r\n        this.set_params()\r\n        this.set_imports()\r\n        this.set_refs()\r\n        this.proxy = this.deep_proxy(this.proxy, this.proxy_callback)\r\n        this.set_forms()\r\n        return this\r\n    }\r\n    $on_event(query: string, event: string, callback: EventCallback) {\r\n        const self = document.querySelector(query)\r\n        if (!this.tree[query])\r\n            this.tree[query] = {}\r\n        self?.addEventListener(event, () => {\r\n            callback({\r\n                self,\r\n                item: this.tree[query],\r\n                proxy: this.proxy,\r\n                refs: this.refs,\r\n                imports: this.imports,\r\n                forms: this.forms,\r\n                params: this.params\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const CARBEE_WORKER = new CoreWorker().init()\r\n\r\nwindow.onload = () => {\r\n\r\n}\r\n", "import { CARBEE_WORKER } from \"../pub.worker\";\n(() => {CARBEE_WORKER.$on_event('p[v_14bc9e2e]', 'click', (cog) => {\n        console.log('pyks');\n        console.log(cog);\n        console.log(cog.item);\n        console.log(cog.self);\n        console.log(cog.proxy);\n        console.log(cog.proxy);\n        cog.proxy['little'] = 'ok';\n        console.log(cog.imports.crypto.SHA256(\"Message\").toString());\n        cog.proxy.tg = '10';\n    })})();(() => {CARBEE_WORKER.$on_event('input[v_01f7dd86]', 'input', () => { console.log('dupa'); })})();(() => {CARBEE_WORKER.$on_event('p[v_9150ae76]', 'click', (cog) => {\n        console.log('pyk');\n        console.log(cog);\n        console.log(cog.item);\n        console.log(cog.proxy);\n        cog.imports.axios({\n            method: 'post',\n            url: 'localhost',\n            data: { kupa: 'dupa' }\n        });\n    })})();"],
  "mappings": "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",
  "names": ["Tree", "read_nest", "object", "address", "address_step", "set_nest", "value", "CoreWorker", "container", "target", "prop", "receiver", "items", "item", "callback", "handler", "form", "form_name", "input", "name", "proxy", "it", "key", "query", "event", "self", "CARBEE_WORKER", "CARBEE_WORKER", "cog"]
}
